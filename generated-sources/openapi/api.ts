// tslint:disable
/**
 * APP-Server API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: simon.suewer@stud.hs-hannover.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    streetaddress?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    postcode?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    state?: string;
}
/**
 * login
 * @export
 * @interface AuthenticateUserSchema
 */
export interface AuthenticateUserSchema {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateUserSchema
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateUserSchema
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ContactData
 */
export interface ContactData {
    /**
     * 
     * @type {string}
     * @memberof ContactData
     */
    postOfficeBox?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactData
     */
    mail?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactData
     */
    telefon?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactData
     */
    cellphonenumber?: string;
}
/**
 * Vertr채ge
 * @export
 * @interface ContractSchema
 */
export interface ContractSchema {
    /**
     * 
     * @type {string}
     * @memberof ContractSchema
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractSchema
     */
    insurancepapernumber: string;
    /**
     * 
     * @type {string}
     * @memberof ContractSchema
     */
    branch?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractSchema
     */
    productname?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractSchema
     */
    startdate?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractSchema
     */
    insured?: string;
}
/**
 * Vertr채ge anlegen
 * @export
 * @interface Create contractSchema
 */
export interface CreatecontractSchema {
    /**
     * 
     * @type {string}
     * @memberof Create contractSchema
     */
    insurancepapernumber: string;
    /**
     * 
     * @type {string}
     * @memberof Create contractSchema
     */
    branch?: string;
    /**
     * 
     * @type {string}
     * @memberof Create contractSchema
     */
    productname?: string;
    /**
     * 
     * @type {string}
     * @memberof Create contractSchema
     */
    startdate?: string;
    /**
     * 
     * @type {string}
     * @memberof Create contractSchema
     */
    insured?: string;
}
/**
 * 
 * @export
 * @interface GetInsured result
 */
export interface GetInsuredresult {
    /**
     * 
     * @type {string}
     * @memberof GetInsured result
     */
    insurancepapernumber?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInsured result
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInsured result
     */
    branch?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInsured result
     */
    productname?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInsured result
     */
    startdate?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInsured result
     */
    insured?: string;
}
/**
 * Insured data model.
 * @export
 * @interface InsuredInputPayload
 */
export interface InsuredInputPayload {
    /**
     * 
     * @type {string}
     * @memberof InsuredInputPayload
     */
    salutation?: string;
    /**
     * 
     * @type {string}
     * @memberof InsuredInputPayload
     */
    firstname: string;
    /**
     * 
     * @type {string}
     * @memberof InsuredInputPayload
     */
    lastname: string;
    /**
     * 
     * @type {number}
     * @memberof InsuredInputPayload
     */
    gender?: number;
    /**
     * 
     * @type {string}
     * @memberof InsuredInputPayload
     */
    birthday?: string;
    /**
     * 
     * @type {Address}
     * @memberof InsuredInputPayload
     */
    address?: Address;
    /**
     * 
     * @type {ContactData}
     * @memberof InsuredInputPayload
     */
    contactData?: ContactData;
    /**
     * 
     * @type {string}
     * @memberof InsuredInputPayload
     */
    partnerId?: string;
    /**
     * 
     * @type {string}
     * @memberof InsuredInputPayload
     */
    mandantenId?: string;
}
/**
 * 
 * @export
 * @interface Model1
 */
export interface Model1 {
    /**
     * 
     * @type {string}
     * @memberof Model1
     */
    partnerId: string;
}
/**
 * 
 * @export
 * @interface Model10
 */
export interface Model10 {
    /**
     * 
     * @type {string}
     * @memberof Model10
     */
    small: string;
    /**
     * 
     * @type {string}
     * @memberof Model10
     */
    sd: string;
    /**
     * 
     * @type {string}
     * @memberof Model10
     */
    hd: string;
    /**
     * 
     * @type {string}
     * @memberof Model10
     */
    fullHd: string;
}
/**
 * 
 * @export
 * @interface Model2
 */
export interface Model2 {
    /**
     * 
     * @type {string}
     * @memberof Model2
     */
    linkToken: string;
}
/**
 * Vertr채ge anlegen
 * @export
 * @interface Model3
 */
export interface Model3 {
    /**
     * 
     * @type {string}
     * @memberof Model3
     */
    insured: string;
    /**
     * 
     * @type {string}
     * @memberof Model3
     */
    contract: string;
}
/**
 * 
 * @export
 * @interface Model5
 */
export interface Model5 {
    /**
     * 
     * @type {string}
     * @memberof Model5
     */
    streetaddress?: string;
    /**
     * 
     * @type {number}
     * @memberof Model5
     */
    postcode?: number;
    /**
     * 
     * @type {string}
     * @memberof Model5
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof Model5
     */
    state?: string;
}
/**
 * 
 * @export
 * @interface Model6
 */
export interface Model6 {
    /**
     * 
     * @type {string}
     * @memberof Model6
     */
    postOfficeBox?: string;
    /**
     * 
     * @type {string}
     * @memberof Model6
     */
    mail?: string;
    /**
     * 
     * @type {number}
     * @memberof Model6
     */
    telefon?: number;
    /**
     * 
     * @type {string}
     * @memberof Model6
     */
    cellphonenumber?: string;
}
/**
 * 
 * @export
 * @interface Model7
 */
export interface Model7 {
    /**
     * 
     * @type {string}
     * @memberof Model7
     */
    mandantenId?: string;
    /**
     * 
     * @type {string}
     * @memberof Model7
     */
    acronym?: string;
    /**
     * 
     * @type {string}
     * @memberof Model7
     */
    desiggnation?: string;
}
/**
 * 
 * @export
 * @interface Model8
 */
export interface Model8 {
    /**
     * 
     * @type {string}
     * @memberof Model8
     */
    salutation?: string;
    /**
     * 
     * @type {string}
     * @memberof Model8
     */
    firstname?: string;
    /**
     * 
     * @type {string}
     * @memberof Model8
     */
    lastname?: string;
    /**
     * 
     * @type {number}
     * @memberof Model8
     */
    gender?: number;
    /**
     * 
     * @type {string}
     * @memberof Model8
     */
    birthday?: string;
    /**
     * 
     * @type {Model5}
     * @memberof Model8
     */
    address?: Model5;
    /**
     * 
     * @type {Model6}
     * @memberof Model8
     */
    contactData?: Model6;
    /**
     * 
     * @type {string}
     * @memberof Model8
     */
    partnerId?: string;
    /**
     * 
     * @type {Array<Model7>}
     * @memberof Model8
     */
    mandantenGruppenListen?: Array<Model7>;
}
/**
 * 
 * @export
 * @interface Model9
 */
export interface Model9 {
    /**
     * 
     * @type {string}
     * @memberof Model9
     */
    salutation?: string;
    /**
     * 
     * @type {string}
     * @memberof Model9
     */
    firstname: string;
    /**
     * 
     * @type {string}
     * @memberof Model9
     */
    lastname: string;
    /**
     * 
     * @type {number}
     * @memberof Model9
     */
    gender?: number;
    /**
     * 
     * @type {string}
     * @memberof Model9
     */
    birthday?: string;
    /**
     * 
     * @type {Address}
     * @memberof Model9
     */
    address?: Address;
    /**
     * 
     * @type {ContactData}
     * @memberof Model9
     */
    contactData?: ContactData;
    /**
     * 
     * @type {string}
     * @memberof Model9
     */
    partnerId?: string;
    /**
     * 
     * @type {string}
     * @memberof Model9
     */
    mandantenId?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    msg?: string;
}
/**
 * Updates f체r Profil
 * @export
 * @interface ProfileSchema
 */
export interface ProfileSchema {
    /**
     * 
     * @type {string}
     * @memberof ProfileSchema
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileSchema
     */
    firstname: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileSchema
     */
    lastname: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileSchema
     */
    email: string;
}
/**
 * Password Recovery
 * @export
 * @interface RecoverPasswordSchema
 */
export interface RecoverPasswordSchema {
    /**
     * 
     * @type {string}
     * @memberof RecoverPasswordSchema
     */
    email: string;
}
/**
 * Update User password
 * @export
 * @interface ResetPasswordSchema
 */
export interface ResetPasswordSchema {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordSchema
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordSchema
     */
    resetPasswordToken: string;
}
/**
 * Versicherungen
 * @export
 * @interface TenantSchema
 */
export interface TenantSchema {
    /**
     * 
     * @type {string}
     * @memberof TenantSchema
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantSchema
     */
    firstname: string;
    /**
     * 
     * @type {string}
     * @memberof TenantSchema
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantSchema
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantSchema
     */
    pathname?: string;
}
/**
 * FORM DATA KEY:file TYPE:FILE
 * @export
 * @interface Upload single file
 */
export interface Uploadsinglefile {
    /**
     * 
     * @type {string}
     * @memberof Upload single file
     */
    file: string;
}
/**
 * Sign up new User
 * @export
 * @interface UserSchema
 */
export interface UserSchema {
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    firstname: string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    lastname: string;
}

/**
 * ClaimCaseApi - axios parameter creator
 * @export
 */
export const ClaimCaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete an image from an claim case
         * @param {Model10} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiClaimCaseDeleteimageId(body?: Model10, options: any = {}): RequestArgs {
            const localVarPath = `/api/claim/case/deleteImage/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get an image from an claim case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimCaseGetimageIdImageid(options: any = {}): RequestArgs {
            const localVarPath = `/api/claim/case/getImage/{id}/{imageid}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Claim-Case with id and secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimCaseIdSecret(options: any = {}): RequestArgs {
            const localVarPath = `/api/claim/case/{id}/{secret}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all claimcases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimcase(options: any = {}): RequestArgs {
            const localVarPath = `/api/claimcase`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get claimcases by contractID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimcaseContractid(options: any = {}): RequestArgs {
            const localVarPath = `/api/claimcase/{contractID}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new claimcase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiClaimcase(options: any = {}): RequestArgs {
            const localVarPath = `/api/claimcase`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Claim-Case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseId(options: any = {}): RequestArgs {
            const localVarPath = `/api/claim/case/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Claim-Case With secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseIdSecret(options: any = {}): RequestArgs {
            const localVarPath = `/api/claim/case/{id}/{secret}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload an image to an claim case
         * @param {Upload20single20file} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseUploadimageId(body?: Upload20single20file, options: any = {}): RequestArgs {
            const localVarPath = `/api/claim/case/uploadImage/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload an image to an claim case with secret
         * @param {Upload20single20file} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseUploadimageIdSecret(body?: Upload20single20file, options: any = {}): RequestArgs {
            const localVarPath = `/api/claim/case/uploadImage/{id}/{secret}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClaimCaseApi - functional programming interface
 * @export
 */
export const ClaimCaseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete an image from an claim case
         * @param {Model10} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiClaimCaseDeleteimageId(body?: Model10, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ClaimCaseApiAxiosParamCreator(configuration).deleteApiClaimCaseDeleteimageId(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get an image from an claim case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimCaseGetimageIdImageid(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ClaimCaseApiAxiosParamCreator(configuration).getApiClaimCaseGetimageIdImageid(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Claim-Case with id and secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimCaseIdSecret(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ClaimCaseApiAxiosParamCreator(configuration).getApiClaimCaseIdSecret(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all claimcases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimcase(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ClaimCaseApiAxiosParamCreator(configuration).getApiClaimcase(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get claimcases by contractID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimcaseContractid(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ClaimCaseApiAxiosParamCreator(configuration).getApiClaimcaseContractid(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create new claimcase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiClaimcase(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ClaimCaseApiAxiosParamCreator(configuration).postApiClaimcase(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Claim-Case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseId(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ClaimCaseApiAxiosParamCreator(configuration).putApiClaimCaseId(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Claim-Case With secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseIdSecret(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ClaimCaseApiAxiosParamCreator(configuration).putApiClaimCaseIdSecret(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upload an image to an claim case
         * @param {Upload20single20file} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseUploadimageId(body?: Upload20single20file, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ClaimCaseApiAxiosParamCreator(configuration).putApiClaimCaseUploadimageId(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upload an image to an claim case with secret
         * @param {Upload20single20file} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseUploadimageIdSecret(body?: Upload20single20file, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ClaimCaseApiAxiosParamCreator(configuration).putApiClaimCaseUploadimageIdSecret(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ClaimCaseApi - factory interface
 * @export
 */
export const ClaimCaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary delete an image from an claim case
         * @param {Model10} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiClaimCaseDeleteimageId(body?: Model10, options?: any): AxiosPromise<string> {
            return ClaimCaseApiFp(configuration).deleteApiClaimCaseDeleteimageId(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary get an image from an claim case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimCaseGetimageIdImageid(options?: any): AxiosPromise<string> {
            return ClaimCaseApiFp(configuration).getApiClaimCaseGetimageIdImageid(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get Claim-Case with id and secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimCaseIdSecret(options?: any): AxiosPromise<string> {
            return ClaimCaseApiFp(configuration).getApiClaimCaseIdSecret(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get all claimcases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimcase(options?: any): AxiosPromise<string> {
            return ClaimCaseApiFp(configuration).getApiClaimcase(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get claimcases by contractID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiClaimcaseContractid(options?: any): AxiosPromise<string> {
            return ClaimCaseApiFp(configuration).getApiClaimcaseContractid(options)(axios, basePath);
        },
        /**
         * 
         * @summary Create new claimcase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiClaimcase(options?: any): AxiosPromise<string> {
            return ClaimCaseApiFp(configuration).postApiClaimcase(options)(axios, basePath);
        },
        /**
         * 
         * @summary Update Claim-Case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseId(options?: any): AxiosPromise<string> {
            return ClaimCaseApiFp(configuration).putApiClaimCaseId(options)(axios, basePath);
        },
        /**
         * 
         * @summary Update Claim-Case With secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseIdSecret(options?: any): AxiosPromise<string> {
            return ClaimCaseApiFp(configuration).putApiClaimCaseIdSecret(options)(axios, basePath);
        },
        /**
         * 
         * @summary Upload an image to an claim case
         * @param {Upload20single20file} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseUploadimageId(body?: Upload20single20file, options?: any): AxiosPromise<string> {
            return ClaimCaseApiFp(configuration).putApiClaimCaseUploadimageId(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Upload an image to an claim case with secret
         * @param {Upload20single20file} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiClaimCaseUploadimageIdSecret(body?: Upload20single20file, options?: any): AxiosPromise<string> {
            return ClaimCaseApiFp(configuration).putApiClaimCaseUploadimageIdSecret(body, options)(axios, basePath);
        },
    };
};

/**
 * ClaimCaseApi - object-oriented interface
 * @export
 * @class ClaimCaseApi
 * @extends {BaseAPI}
 */
export class ClaimCaseApi extends BaseAPI {
    /**
     * 
     * @summary delete an image from an claim case
     * @param {Model10} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimCaseApi
     */
    public deleteApiClaimCaseDeleteimageId(body?: Model10, options?: any) {
        return ClaimCaseApiFp(this.configuration).deleteApiClaimCaseDeleteimageId(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary get an image from an claim case
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimCaseApi
     */
    public getApiClaimCaseGetimageIdImageid(options?: any) {
        return ClaimCaseApiFp(this.configuration).getApiClaimCaseGetimageIdImageid(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get Claim-Case with id and secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimCaseApi
     */
    public getApiClaimCaseIdSecret(options?: any) {
        return ClaimCaseApiFp(this.configuration).getApiClaimCaseIdSecret(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get all claimcases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimCaseApi
     */
    public getApiClaimcase(options?: any) {
        return ClaimCaseApiFp(this.configuration).getApiClaimcase(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get claimcases by contractID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimCaseApi
     */
    public getApiClaimcaseContractid(options?: any) {
        return ClaimCaseApiFp(this.configuration).getApiClaimcaseContractid(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Create new claimcase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimCaseApi
     */
    public postApiClaimcase(options?: any) {
        return ClaimCaseApiFp(this.configuration).postApiClaimcase(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update Claim-Case
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimCaseApi
     */
    public putApiClaimCaseId(options?: any) {
        return ClaimCaseApiFp(this.configuration).putApiClaimCaseId(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update Claim-Case With secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimCaseApi
     */
    public putApiClaimCaseIdSecret(options?: any) {
        return ClaimCaseApiFp(this.configuration).putApiClaimCaseIdSecret(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Upload an image to an claim case
     * @param {Upload20single20file} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimCaseApi
     */
    public putApiClaimCaseUploadimageId(body?: Upload20single20file, options?: any) {
        return ClaimCaseApiFp(this.configuration).putApiClaimCaseUploadimageId(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Upload an image to an claim case with secret
     * @param {Upload20single20file} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimCaseApi
     */
    public putApiClaimCaseUploadimageIdSecret(body?: Upload20single20file, options?: any) {
        return ClaimCaseApiFp(this.configuration).putApiClaimCaseUploadimageIdSecret(body, options)(this.axios, this.basePath);
    }

}


/**
 * ContractsApi - axios parameter creator
 * @export
 */
export const ContractsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiContractsId(options: any = {}): RequestArgs {
            const localVarPath = `/api/contracts/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all conracts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiContracts(options: any = {}): RequestArgs {
            const localVarPath = `/api/contracts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get contract by partnerId (insured)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsuredIdContracts(options: any = {}): RequestArgs {
            const localVarPath = `/api/insured/{id}/contracts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Create20contractSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContracts(body?: Create20contractSchema, options: any = {}): RequestArgs {
            const localVarPath = `/api/contracts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ContractSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiContractsId(body?: ContractSchema, options: any = {}): RequestArgs {
            const localVarPath = `/api/contracts/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get contract by partnerId (insured)
         * @param {Model3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiInsuredContracts(body?: Model3, options: any = {}): RequestArgs {
            const localVarPath = `/api/insured/contracts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractsApi - functional programming interface
 * @export
 */
export const ContractsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiContractsId(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ContractsApiAxiosParamCreator(configuration).deleteApiContractsId(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all conracts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiContracts(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetInsured20result>> {
            const localVarAxiosArgs = ContractsApiAxiosParamCreator(configuration).getApiContracts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get contract by partnerId (insured)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsuredIdContracts(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetInsured20result>> {
            const localVarAxiosArgs = ContractsApiAxiosParamCreator(configuration).getApiInsuredIdContracts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Create20contractSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContracts(body?: Create20contractSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ContractsApiAxiosParamCreator(configuration).postApiContracts(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ContractSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiContractsId(body?: ContractSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ContractsApiAxiosParamCreator(configuration).putApiContractsId(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get contract by partnerId (insured)
         * @param {Model3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiInsuredContracts(body?: Model3, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ContractsApiAxiosParamCreator(configuration).putApiInsuredContracts(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ContractsApi - factory interface
 * @export
 */
export const ContractsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiContractsId(options?: any): AxiosPromise<string> {
            return ContractsApiFp(configuration).deleteApiContractsId(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get all conracts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiContracts(options?: any): AxiosPromise<Array<GetInsured20result>> {
            return ContractsApiFp(configuration).getApiContracts(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get contract by partnerId (insured)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsuredIdContracts(options?: any): AxiosPromise<Array<GetInsured20result>> {
            return ContractsApiFp(configuration).getApiInsuredIdContracts(options)(axios, basePath);
        },
        /**
         * 
         * @param {Create20contractSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContracts(body?: Create20contractSchema, options?: any): AxiosPromise<string> {
            return ContractsApiFp(configuration).postApiContracts(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {ContractSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiContractsId(body?: ContractSchema, options?: any): AxiosPromise<string> {
            return ContractsApiFp(configuration).putApiContractsId(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get contract by partnerId (insured)
         * @param {Model3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiInsuredContracts(body?: Model3, options?: any): AxiosPromise<string> {
            return ContractsApiFp(configuration).putApiInsuredContracts(body, options)(axios, basePath);
        },
    };
};

/**
 * ContractsApi - object-oriented interface
 * @export
 * @class ContractsApi
 * @extends {BaseAPI}
 */
export class ContractsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public deleteApiContractsId(options?: any) {
        return ContractsApiFp(this.configuration).deleteApiContractsId(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get all conracts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public getApiContracts(options?: any) {
        return ContractsApiFp(this.configuration).getApiContracts(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get contract by partnerId (insured)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public getApiInsuredIdContracts(options?: any) {
        return ContractsApiFp(this.configuration).getApiInsuredIdContracts(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {Create20contractSchema} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public postApiContracts(body?: Create20contractSchema, options?: any) {
        return ContractsApiFp(this.configuration).postApiContracts(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ContractSchema} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public putApiContractsId(body?: ContractSchema, options?: any) {
        return ContractsApiFp(this.configuration).putApiContractsId(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get contract by partnerId (insured)
     * @param {Model3} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public putApiInsuredContracts(body?: Model3, options?: any) {
        return ContractsApiFp(this.configuration).putApiInsuredContracts(body, options)(this.axios, this.basePath);
    }

}


/**
 * InsuredApi - axios parameter creator
 * @export
 */
export const InsuredApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete an insured
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiInsuredId(options: any = {}): RequestArgs {
            const localVarPath = `/api/insured/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all insured
         * @param {string} [authorization] A valid Json Web Token
         * @param {number} [beginAtIndex] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsured(authorization?: string, beginAtIndex?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/insured`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginAtIndex !== undefined) {
                localVarQueryParameter['beginAtIndex'] = beginAtIndex;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an insured by InsuredId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsuredId(options: any = {}): RequestArgs {
            const localVarPath = `/api/insured/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an insured by partnerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsuredPidPartnerid(options: any = {}): RequestArgs {
            const localVarPath = `/api/insured/pid/{partnerId}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an insured.
         * @param {InsuredInputPayload} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiInsured(body?: InsuredInputPayload, options: any = {}): RequestArgs {
            const localVarPath = `/api/insured`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initialise Link between User and Insured
         * @param {Model1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiInsuredLink(body?: Model1, options: any = {}): RequestArgs {
            const localVarPath = `/api/insured/link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm Link between User and Insured
         * @param {Model2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiInsuredLinkConfirm(body?: Model2, options: any = {}): RequestArgs {
            const localVarPath = `/api/insured/link/confirm`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an insured
         * @param {InsuredInputPayload} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiInsuredId(body?: InsuredInputPayload, options: any = {}): RequestArgs {
            const localVarPath = `/api/insured/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsuredApi - functional programming interface
 * @export
 */
export const InsuredApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete an insured
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiInsuredId(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = InsuredApiAxiosParamCreator(configuration).deleteApiInsuredId(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all insured
         * @param {string} [authorization] A valid Json Web Token
         * @param {number} [beginAtIndex] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsured(authorization?: string, beginAtIndex?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Model8>> {
            const localVarAxiosArgs = InsuredApiAxiosParamCreator(configuration).getApiInsured(authorization, beginAtIndex, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get an insured by InsuredId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsuredId(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model9> {
            const localVarAxiosArgs = InsuredApiAxiosParamCreator(configuration).getApiInsuredId(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get an insured by partnerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsuredPidPartnerid(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model9> {
            const localVarAxiosArgs = InsuredApiAxiosParamCreator(configuration).getApiInsuredPidPartnerid(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create an insured.
         * @param {InsuredInputPayload} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiInsured(body?: InsuredInputPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = InsuredApiAxiosParamCreator(configuration).postApiInsured(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Initialise Link between User and Insured
         * @param {Model1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiInsuredLink(body?: Model1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = InsuredApiAxiosParamCreator(configuration).postApiInsuredLink(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Confirm Link between User and Insured
         * @param {Model2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiInsuredLinkConfirm(body?: Model2, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = InsuredApiAxiosParamCreator(configuration).postApiInsuredLinkConfirm(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update an insured
         * @param {InsuredInputPayload} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiInsuredId(body?: InsuredInputPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = InsuredApiAxiosParamCreator(configuration).putApiInsuredId(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InsuredApi - factory interface
 * @export
 */
export const InsuredApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete an insured
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiInsuredId(options?: any): AxiosPromise<string> {
            return InsuredApiFp(configuration).deleteApiInsuredId(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get all insured
         * @param {string} [authorization] A valid Json Web Token
         * @param {number} [beginAtIndex] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsured(authorization?: string, beginAtIndex?: number, limit?: number, options?: any): AxiosPromise<Array<Model8>> {
            return InsuredApiFp(configuration).getApiInsured(authorization, beginAtIndex, limit, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get an insured by InsuredId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsuredId(options?: any): AxiosPromise<Model9> {
            return InsuredApiFp(configuration).getApiInsuredId(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get an insured by partnerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInsuredPidPartnerid(options?: any): AxiosPromise<Model9> {
            return InsuredApiFp(configuration).getApiInsuredPidPartnerid(options)(axios, basePath);
        },
        /**
         * 
         * @summary Create an insured.
         * @param {InsuredInputPayload} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiInsured(body?: InsuredInputPayload, options?: any): AxiosPromise<string> {
            return InsuredApiFp(configuration).postApiInsured(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Initialise Link between User and Insured
         * @param {Model1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiInsuredLink(body?: Model1, options?: any): AxiosPromise<string> {
            return InsuredApiFp(configuration).postApiInsuredLink(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Confirm Link between User and Insured
         * @param {Model2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiInsuredLinkConfirm(body?: Model2, options?: any): AxiosPromise<string> {
            return InsuredApiFp(configuration).postApiInsuredLinkConfirm(body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update an insured
         * @param {InsuredInputPayload} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiInsuredId(body?: InsuredInputPayload, options?: any): AxiosPromise<string> {
            return InsuredApiFp(configuration).putApiInsuredId(body, options)(axios, basePath);
        },
    };
};

/**
 * InsuredApi - object-oriented interface
 * @export
 * @class InsuredApi
 * @extends {BaseAPI}
 */
export class InsuredApi extends BaseAPI {
    /**
     * 
     * @summary Delete an insured
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuredApi
     */
    public deleteApiInsuredId(options?: any) {
        return InsuredApiFp(this.configuration).deleteApiInsuredId(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get all insured
     * @param {string} [authorization] A valid Json Web Token
     * @param {number} [beginAtIndex] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuredApi
     */
    public getApiInsured(authorization?: string, beginAtIndex?: number, limit?: number, options?: any) {
        return InsuredApiFp(this.configuration).getApiInsured(authorization, beginAtIndex, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get an insured by InsuredId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuredApi
     */
    public getApiInsuredId(options?: any) {
        return InsuredApiFp(this.configuration).getApiInsuredId(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get an insured by partnerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuredApi
     */
    public getApiInsuredPidPartnerid(options?: any) {
        return InsuredApiFp(this.configuration).getApiInsuredPidPartnerid(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Create an insured.
     * @param {InsuredInputPayload} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuredApi
     */
    public postApiInsured(body?: InsuredInputPayload, options?: any) {
        return InsuredApiFp(this.configuration).postApiInsured(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Initialise Link between User and Insured
     * @param {Model1} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuredApi
     */
    public postApiInsuredLink(body?: Model1, options?: any) {
        return InsuredApiFp(this.configuration).postApiInsuredLink(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Confirm Link between User and Insured
     * @param {Model2} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuredApi
     */
    public postApiInsuredLinkConfirm(body?: Model2, options?: any) {
        return InsuredApiFp(this.configuration).postApiInsuredLinkConfirm(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update an insured
     * @param {InsuredInputPayload} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuredApi
     */
    public putApiInsuredId(body?: InsuredInputPayload, options?: any) {
        return InsuredApiFp(this.configuration).putApiInsuredId(body, options)(this.axios, this.basePath);
    }

}


/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProfileId(options: any = {}): RequestArgs {
            const localVarPath = `/api/profile/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProfilePidPartnerid(options: any = {}): RequestArgs {
            const localVarPath = `/api/profile/pid/{partnerId}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProfileSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiProfileId(body?: ProfileSchema, options: any = {}): RequestArgs {
            const localVarPath = `/api/profile/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProfileId(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ProfileApiAxiosParamCreator(configuration).getApiProfileId(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProfilePidPartnerid(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ProfileApiAxiosParamCreator(configuration).getApiProfilePidPartnerid(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ProfileSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiProfileId(body?: ProfileSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ProfileApiAxiosParamCreator(configuration).putApiProfileId(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProfileId(options?: any): AxiosPromise<string> {
            return ProfileApiFp(configuration).getApiProfileId(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProfilePidPartnerid(options?: any): AxiosPromise<string> {
            return ProfileApiFp(configuration).getApiProfilePidPartnerid(options)(axios, basePath);
        },
        /**
         * 
         * @param {ProfileSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiProfileId(body?: ProfileSchema, options?: any): AxiosPromise<string> {
            return ProfileApiFp(configuration).putApiProfileId(body, options)(axios, basePath);
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getApiProfileId(options?: any) {
        return ProfileApiFp(this.configuration).getApiProfileId(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getApiProfilePidPartnerid(options?: any) {
        return ProfileApiFp(this.configuration).getApiProfilePidPartnerid(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ProfileSchema} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public putApiProfileId(body?: ProfileSchema, options?: any) {
        return ProfileApiFp(this.configuration).putApiProfileId(body, options)(this.axios, this.basePath);
    }

}


/**
 * TenantsApi - axios parameter creator
 * @export
 */
export const TenantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiTenantsId(options: any = {}): RequestArgs {
            const localVarPath = `/api/tenants/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTenants(options: any = {}): RequestArgs {
            const localVarPath = `/api/tenants`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TenantSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTenants(body?: TenantSchema, options: any = {}): RequestArgs {
            const localVarPath = `/api/tenants`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TenantSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiTenantsId(body?: TenantSchema, options: any = {}): RequestArgs {
            const localVarPath = `/api/tenants/{id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantsApi - functional programming interface
 * @export
 */
export const TenantsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiTenantsId(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = TenantsApiAxiosParamCreator(configuration).deleteApiTenantsId(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTenants(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = TenantsApiAxiosParamCreator(configuration).getApiTenants(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {TenantSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTenants(body?: TenantSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = TenantsApiAxiosParamCreator(configuration).postApiTenants(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {TenantSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiTenantsId(body?: TenantSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = TenantsApiAxiosParamCreator(configuration).putApiTenantsId(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TenantsApi - factory interface
 * @export
 */
export const TenantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiTenantsId(options?: any): AxiosPromise<string> {
            return TenantsApiFp(configuration).deleteApiTenantsId(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTenants(options?: any): AxiosPromise<string> {
            return TenantsApiFp(configuration).getApiTenants(options)(axios, basePath);
        },
        /**
         * 
         * @param {TenantSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTenants(body?: TenantSchema, options?: any): AxiosPromise<string> {
            return TenantsApiFp(configuration).postApiTenants(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {TenantSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiTenantsId(body?: TenantSchema, options?: any): AxiosPromise<string> {
            return TenantsApiFp(configuration).putApiTenantsId(body, options)(axios, basePath);
        },
    };
};

/**
 * TenantsApi - object-oriented interface
 * @export
 * @class TenantsApi
 * @extends {BaseAPI}
 */
export class TenantsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public deleteApiTenantsId(options?: any) {
        return TenantsApiFp(this.configuration).deleteApiTenantsId(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public getApiTenants(options?: any) {
        return TenantsApiFp(this.configuration).getApiTenants(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {TenantSchema} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public postApiTenants(body?: TenantSchema, options?: any) {
        return TenantsApiFp(this.configuration).postApiTenants(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {TenantSchema} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public putApiTenantsId(body?: TenantSchema, options?: any) {
        return TenantsApiFp(this.configuration).putApiTenantsId(body, options)(this.axios, this.basePath);
    }

}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthenticateUserSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersAuthenticate(body?: AuthenticateUserSchema, options: any = {}): RequestArgs {
            const localVarPath = `/api/users/authenticate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RecoverPasswordSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersRecover(body?: RecoverPasswordSchema, options: any = {}): RequestArgs {
            const localVarPath = `/api/users/recover`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersRegister(body?: UserSchema, options: any = {}): RequestArgs {
            const localVarPath = `/api/users/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersReset(body?: ResetPasswordSchema, options: any = {}): RequestArgs {
            const localVarPath = `/api/users/reset`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiUsersAuthenticateValidmail(token: string, options: any = {}): RequestArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling putApiUsersAuthenticateValidmail.');
            }
            const localVarPath = `/api/users/authenticate/validMail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthenticateUserSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersAuthenticate(body?: AuthenticateUserSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).postApiUsersAuthenticate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {RecoverPasswordSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersRecover(body?: RecoverPasswordSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).postApiUsersRecover(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UserSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersRegister(body?: UserSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).postApiUsersRegister(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ResetPasswordSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersReset(body?: ResetPasswordSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).postApiUsersReset(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiUsersAuthenticateValidmail(token: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).putApiUsersAuthenticateValidmail(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {AuthenticateUserSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersAuthenticate(body?: AuthenticateUserSchema, options?: any): AxiosPromise<string> {
            return UserApiFp(configuration).postApiUsersAuthenticate(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {RecoverPasswordSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersRecover(body?: RecoverPasswordSchema, options?: any): AxiosPromise<string> {
            return UserApiFp(configuration).postApiUsersRecover(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {UserSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersRegister(body?: UserSchema, options?: any): AxiosPromise<string> {
            return UserApiFp(configuration).postApiUsersRegister(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {ResetPasswordSchema} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersReset(body?: ResetPasswordSchema, options?: any): AxiosPromise<string> {
            return UserApiFp(configuration).postApiUsersReset(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiUsersAuthenticateValidmail(token: string, options?: any): AxiosPromise<string> {
            return UserApiFp(configuration).putApiUsersAuthenticateValidmail(token, options)(axios, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {AuthenticateUserSchema} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postApiUsersAuthenticate(body?: AuthenticateUserSchema, options?: any) {
        return UserApiFp(this.configuration).postApiUsersAuthenticate(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RecoverPasswordSchema} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postApiUsersRecover(body?: RecoverPasswordSchema, options?: any) {
        return UserApiFp(this.configuration).postApiUsersRecover(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {UserSchema} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postApiUsersRegister(body?: UserSchema, options?: any) {
        return UserApiFp(this.configuration).postApiUsersRegister(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ResetPasswordSchema} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postApiUsersReset(body?: ResetPasswordSchema, options?: any) {
        return UserApiFp(this.configuration).postApiUsersReset(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public putApiUsersAuthenticateValidmail(token: string, options?: any) {
        return UserApiFp(this.configuration).putApiUsersAuthenticateValidmail(token, options)(this.axios, this.basePath);
    }

}


